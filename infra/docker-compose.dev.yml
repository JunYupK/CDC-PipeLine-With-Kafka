version: '3'

services:
  postgres:
    image: postgres:latest
    platform: linux/amd64  # M1/M2 Mac 호환성
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command:
      - "postgres"
      - "-c"
      - "listen_addresses=*"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=10"
      - "-c"
      - "max_replication_slots=10"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres:/docker-entrypoint-initdb.d
    networks:
      infra-network:
        aliases:
          - postgres.internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  debezium-init:
    image: curlimages/curl:latest
    depends_on:
      kafka-connect:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./connector-config.json:/connector-config.json
    command: >
      sh -c "
        echo 'Waiting for Kafka Connect to start...' &&
        until curl -s http://kafka-connect:8083/ > /dev/null; do sleep 3; echo 'Waiting...'; done &&
        echo 'Creating Debezium connector...' &&
        curl -X POST -H 'Content-Type: application/json' --data @/connector-config.json http://kafka-connect:8083/connectors || echo 'Connector setup completed'
      "
    restart: on-failure
    networks:
      - infra-network

  kafka:
    image: confluentinc/cp-kafka:latest
    platform: linux/amd64  # M1/M2 Mac 호환성
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
      KAFKA_METADATA_LOG_DIR: '/tmp/kraft-combined-logs'
    container_name: kafka  # 명시적으로 컨테이너 이름 지정
    networks:
      infra-network:
        aliases:
          - kafka.internal
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 20s
      timeout: 10s
      retries: 3
    volumes:
      - ./jmx-exporter:/opt/jmx-exporter

  kafka-connect:
    image: debezium/connect:2.4
    platform: linux/amd64
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      BOOTSTRAP_SERVERS: kafka:29092  # 이제 Kafka가 실행 중이므로 연결 가능
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    depends_on:
      kafka:
        condition: service_started  # 헬스 체크 대신 service_started 사용
      postgres:
        condition: service_healthy  # 이미 헬스 체크가 있는 서비스
    healthcheck:  # 헬스 체크 추가
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s  # 시작 시간을 더 여유 있게 설정
    networks:
      - infra-network

  prometheus:
    image: prom/prometheus:latest
    platform: linux/amd64  # M1/M2 Mac 호환성
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.external-url=http://localhost:9090'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_DAYS}d'
    networks:
      infra-network:
        aliases:
          - prometheus.internal

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    platform: linux/amd64
    command:
      - --kafka.server=172.19.0.5:29092
      - --web.listen-address=:9308
      - --log.level=debug  # 로그 레벨 증가
    expose:
      - "9308"
    ports:
      - "9308:9308"
    depends_on:
      kafka:
        condition: service_started
    restart: on-failure  # 재시작 정책 추가
    networks:
      - infra-network
  grafana:
    image: grafana/grafana:latest
    platform: linux/amd64  # M1/M2 Mac 호환성
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_ALLOW_EMBEDDING=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      infra-network:
        aliases:
          - grafana.internal

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  infra-network:
    external: true